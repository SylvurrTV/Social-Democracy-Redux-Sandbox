title: Election
on-arrival: {!
// calculate normalized class voting amounts (0 to 100)
for (var c of Q.classes) {
    var class_votes = 0;
    for (var party of Q.parties) {
        if (Q[c+'_'+party] < 0) {
            Q[c+'_'+party] = 0;
        }
        class_votes += Q[c+'_'+party];
    }
    for (var party of Q.parties) {
        Q[c + '_' + party + '_normalized'] = 100*Q[c+'_'+party]/class_votes;
        Q[c + '_' + party + '_display'] = Math.round(100*Q[c+'_'+party]/class_votes);
    }
}

// 1. calculate support for each of the parties
var total_support = 0;
for (var party of Q.parties) {
    var party_support = 0;
    for (var c of Q.classes) {
        // but this version is somewhat more entertaining and allows for wilder swings in votes.
        // the other option basically necessitates a multi-class strategy. while the first option allows for a working-class-only strategy.
        if (Q.old_demographics) {
            // okay i'm pretty sure this is wrong, and the hard version is correct
            // basically this allows for "spillover" effects in other demographics.
            // so you can campaign among say the workers and 
            party_support += Q[c]*Q[c+'_'+party];
            // However, there should be a cap on how much party support you can get in a certain demo.
        } else  {
            party_support += Q[c]*Q[c+'_'+party+'_normalized'];
        }
    }
    Q[party + '_support'] = party_support;
    total_support += party_support;
}
// 2. normalize support (fraction)
// 3. Round to integers
// TODO: round to 1 decimal instead of rounding to integers
// to do that, we multiply party_normalized*1000 and divide the rounded number by 10.
for (var party of Q.parties) {
    Q[party+'_normalized'] = Q[party + '_support']/total_support;
    Q[party+'_votes_dec'] = Math.round(Q[party+'_normalized']*1000)/10;
    if (Q.use_decimals) {
        Q[party+'_votes'] = Q[party+'_votes_dec'];
        Q[party + '_votes_disp'] = Q[party+'_votes'];
    } else {
        Q[party+'_votes'] = Math.round(Q[party+'_normalized']*100);
        Q[party + '_votes_disp'] = Q[party+'_votes_dec'].toFixed(1);
    }
    //Q[party+'_votes'] = Q[party+'_votes_dec'];
    // display
}

Q.prussia_workers = Q.workers*1;
Q.prussia_new_middle = Q.new_middle*1.25;
Q.prussia_old_middle = Q.old_middle*1.05;
Q.prussia_unemployed = Q.unemployed*0.85;
Q.prussia_rural = Q.rural*0.85;
Q.prussia_catholics = Q.catholics*0.7;

Q.bavaria_workers = Q.workers*0.75;
Q.bavaria_new_middle = Q.new_middle*0.6;
Q.bavaria_old_middle = Q.old_middle*1;
Q.bavaria_unemployed = Q.unemployed*0.9;
Q.bavaria_rural = Q.rural*1.3;
Q.bavaria_catholics = Q.catholics*1.5;

Q.thuringia_workers = Q.workers*1.1;
Q.thuringia_new_middle = Q.new_middle*0.75;
Q.thuringia_old_middle = Q.old_middle*1.2;
Q.thuringia_unemployed = Q.unemployed*1.2;
Q.thuringia_rural = Q.rural*1;
Q.thuringia_catholics = Q.catholics*0.2;

Q.saxony_workers = Q.workers*1.1;
Q.saxony_new_middle = Q.new_middle*0.6;
Q.saxony_old_middle = Q.old_middle*1.8;
Q.saxony_unemployed = Q.unemployed*1;
Q.saxony_rural = Q.rural*0.6;
Q.saxony_catholics = Q.catholics*0.1;

Q.schaumburg_lippe_workers = Q.workers*1.9;
Q.schaumburg_lippe_new_middle = Q.new_middle*0.7;
Q.schaumburg_lippe_old_middle = Q.old_middle*3.5;
Q.schaumburg_lippe_unemployed = Q.unemployed*0.7;
Q.schaumburg_lippe_rural = Q.rural*0.6;
Q.schaumburg_lippe_catholics = Q.catholics*0.05;

Q.hamburg_workers = Q.workers*1.05;
Q.hamburg_new_middle = Q.new_middle*1.5;
Q.hamburg_old_middle = Q.old_middle*1.5;
Q.hamburg_unemployed = Q.unemployed*1.1;
Q.hamburg_rural = Q.rural*0.5;
Q.hamburg_catholics = Q.catholics*0.1;

Q.wurttemberg_workers = Q.workers*0.8;
Q.wurttemberg_new_middle = Q.new_middle*1.05;
Q.wurttemberg_old_middle = Q.old_middle*1.15;
Q.wurttemberg_unemployed = Q.unemployed*0.9;
Q.wurttemberg_rural = Q.rural*1.1;
Q.wurttemberg_catholics = Q.catholics*1.5;

!}
go-to: jumpScene

# note: this is a helpful utility to deal with elections and so on.
